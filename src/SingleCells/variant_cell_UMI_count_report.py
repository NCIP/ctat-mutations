#!/usr/bin/env python3

import sys, os, re
import pandas as pd
import argparse



def main(args):

    vcf_sc_reads_filename = args.vcf_sc_reads_tsv

    read_to_variant_assignments_df = pd.read_csv(vcf_sc_reads_filename, sep="\t")

    ## process reads with variants:
    reads_with_variants_df = read_to_variant_assignments_df[ ['chr_pos_variant', 'reads_with_variant'] ]
    reads_with_variants_df = reads_with_variants_df [ ~ reads_with_variants_df['reads_with_variant'].isna() ]
    reads_with_variants_df['reads_with_variant'] = reads_with_variants_df['reads_with_variant'].apply(lambda x: x.split(","))
    reads_with_variants_df = reads_with_variants_df.explode('reads_with_variant')
    reads_with_variants_df[ ['cell_barcode', 'UMI', 'read_name'] ] = reads_with_variants_df['reads_with_variant'].str.split("^", expand=True)
    reads_with_variants_df = reads_with_variants_df[ ['chr_pos_variant', 'cell_barcode', 'UMI'] ].drop_duplicates()
    num_reads_with_variant_df = reads_with_variants_df.groupby(['chr_pos_variant','cell_barcode']).size().reset_index(name='num_reads_w_variant')


    ## process ref-matching reads
    ref_matching_reads_df = read_to_variant_assignments_df[ ['chr_pos_variant', 'ref_matching_reads'] ]
    ref_matching_reads_df = ref_matching_reads_df [ ~ ref_matching_reads_df['ref_matching_reads'].isna() ]
    ref_matching_reads_df['ref_matching_reads'] = ref_matching_reads_df['ref_matching_reads'].apply(lambda x: x.split(","))
    ref_matching_reads_df = ref_matching_reads_df.explode('ref_matching_reads')
    ref_matching_reads_df[ ['cell_barcode', 'UMI', 'read_name'] ] = ref_matching_reads_df['ref_matching_reads'].str.split("^", expand=True)
    num_ref_matching_reads_df = ref_matching_reads_df.groupby(['chr_pos_variant','cell_barcode']).size().reset_index(name='num_ref_matching_reads')


    ## Merge counts of reads w/ variant vs. ref-match by variant and cell
    variant_cell_count_summary_df = num_reads_with_variant_df.merge(num_ref_matching_reads_df,
                                                                    on=['chr_pos_variant', 'cell_barcode'],
                                                                    how='outer')


    variant_cell_count_summary_df = variant_cell_count_summary_df.merge(cell_bc_to_type_df,
                                                                        left_on='cell_barcode',
                                                                        right_on='barcodes').drop(['barcodes'], axis=1)

    # write output file with summary UMI counts
    variant_cell_count_summary_df.to_csv(args.output, sep="\t", index=False)

    
    sys.exit(0)
    
    

def parse_args():
    
    parser = argparse.ArgumentParser(description="count UMIs for variant and ref-matching reads according to cell",
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument("--vcf_sc_reads_tsv", type=str, required=True, help="input file generated by annotate_PASS_reads.extract_sc_info.py")
    
    parser.add_argument("--output", type=str, required=True, help="output file for summary tsv file")

    args = parser.parse_args()

    return args



if __name__=='__main__':
    args = parse_args()
    main(args)
